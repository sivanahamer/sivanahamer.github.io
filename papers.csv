title,authors,year,venue,abstract,keywords,link,id,preprint
Measuring students' contributions in software development projects using Git metrics,"SH,CQL,AM,MJ",2020,CLEI,"Many courses in the software engineering area are centered around team-based project development. Evaluating these projects is a challenge due to the difficulty of measuring individual student contributions versus team contributions. The adoption of distributed version control systems like Git enables the measurement of students' and teams' contributions to the project. In this work, we analyze the contributions within five software development projects from undergraduate courses that used project-based learning. For this, we generate visualizations of aggregated Git metrics using inequality indexes and inter-decile ratios, which offer insights into the practices and processes followed by students and teams throughout the project development. This approach allowed us to identify both inequality among students' contributions and development processes with a non-steady pace, rendering a useful feedback tool for instructors and students during the development of the project. Further studies can be conducted to assess the complexity and value of students' contributions by analyzing their source code commits and other software artifacts.","contribution metrics , mining software repositories , software metrics , git , software engineering education , project-based learning",https://ieeexplore.ieee.org/abstract/document/9458363,hamer2020Measuring,
Using git metrics to measure students' and teams' code contributions in software development projects,"SH,CQL,AM,MJ",2021,CLEIj,"Many software engineering courses are centered around team-based project development. Analyzing the source code contributions during the projects' development could provide both instructors and students with constant feedback to identify common trends and behaviors that can be improved during the courses. Evaluating course projects is a challenge due to the difficulty of measuring individual student contributions versus team contributions during the development. The adoption of distributed version control sys-tems like git enable the measurement of students' and teams' contributions to the project.In this work, we analyze the contributions within eight software development projects,with 150 students in total, from undergraduate courses that used project-based learning.We generate visualizations of aggregated git metrics using inequality measures and the contribution per module, which offer insights into the practices and processes followed by students and teams throughout the project development. This approach allowed us to identify inequality among students' contributions, the modules where students con-tributed, development processes with a non-steady pace, and integration practices render-ing a useful feedback tool for instructors and students during the project's development.Further studies can be conducted to assess the quality, complexity, and ownership of the contributions by analyzing software artifacts.","git contribution metrics, mining software repositories, software engineering education, contin-uous assessment, project-based learning",https://www.clei.org/cleiej/index.php/cleiej/article/view/502/409,hamer2021Using,
Measuring students' source code quality in software development projects through commit-impact analysis,"SH,CQL,AM,MJ",2021,ICITS,"Evaluating the quality of software engineering projects in university courses is challenging because it evolves over time and is a time consuming task. Students applying software quality principles need early and constant feedback on their projects to improve their technical competence as software developers. We conducted a case study to explore whether student' changes have an impact on the project quality by mining a Git repository. We analyzed a total of 2253 changes (commits) from an undergraduate software engineering project to understand the impact on quality of each change measuring metrics (complexity, duplication, maintainability, and security) mined from the repository. This analysis allowed us to identify from students' contributions challenges and improvement opportunities in engineering practices. As future work, we plan to analyze more projects and extend our analysis with more software metrics.","Software engineering education, Mining software repositories, Commit-impact analysis, Software quality, Project based learning",https://link.springer.com/chapter/10.1007/978-3-030-68418-1_11,hamer2021Measuring,
Students Projects' Source Code Changes Impact on Software Quality Through Static Analysis,"SH,CQL,MJ",2021,QUATIC,"Monitoring and examining source code and quality metrics is an essential task in software development projects. Still, it is challenging to evaluate for educational projects due to the time and effort required by instructors, and constant change during the software project evolution. In this paper, we used an automated approach to analyze source code and quality metrics' evolution and impact in software engineering projects using static code analysis on each software change (commits and merges). We examined five undergraduate software engineering projects' changed modules, compilability, and source code and quality metrics (size, complexity, duplication, maintainability, and security). In total, we assessed 12,103 changes from 103 students contributing to the projects. Our approach allowed us to identify students' project trends in the impact of the source code changes, providing insights into behaviors such as technology knowledge deficiencies, issues in continuous integration practices, and software quality degradation. We believe that the early, constant feedback on student software engineering project quality can help instructors improve their courses and students enhance their development practices. Tracking of source code evolution could be done via static analysis and instructors could use the analysis results for teaching.","Change analysis, Quality metrics, Project based learning, Software engineering education, Mining software repositories",https://link.springer.com/chapter/10.1007/978-3-030-85347-1_39,hamer2021Students,
Automatically recovering students' missing trace links between commits and user stories,"SH,CQL,MJ",2021,CIbSE,"Trace links between commits and user stories can be used in educational software engineering projects to track progress and determine the students' contribution to projects' requirements. Thus, traceability can be helpful in courses for grade assessment, and project monitoring and improvement. Currently developers, including students in courses, manually link commits and issues using version control systems (e.g., Git) and issue tracking systems (e.g., Jira). However, manual trace links are often incomplete. In our study, we found that only 43% of the commits are linked to stories in the analyzed project. Therefore, there is a need to automatically or semi-automatically create trace links. This study aims to automatically recover trace links between commits and user stories requirements in an undergraduate student project with twenty students and four teams. We used unstructured data from messages, code and files of commits and stories to gather textual similarity measures. We evaluated the effectiveness of information retrieval (Vector space model, Latent semantic indexing and BM25) and machine learning (Random forests, Decision trees and Neural networks) techniques in recovering missing links using textual and process data. Machine learning models outperformed information retrieval models in precision, recall, and F-measure. Machine learning models were able to effectively recover missing trace links with an average of 93% precision and 94% recall, showing the applicability of the approach.","software engineering education, traceability, link recovery, information retrieval, machine learning, mining software repositories",https://www.kerwa.ucr.ac.cr/handle/10669/89717,hamer2021Automatically,
How Have We Researched Developers' Contributions in Software Engineering? A Systematic Mapping Study,"SH,CQL,MJ",2023,,"Context: Developers contribute to different technical and non-technical tasks throughout the software development life cycle, such as implementing and refactoring code, reviewing changes, documenting, testing, communicating, and collaborating. Contribution assessment research can help understand development phenomena better, motivate developers, and improve software engineering projects in industrial, open-source, and academic settings. As the body of work assessing software engineering developer contribution grows, it becomes worthwhile to aggregate evidence to standardize classifications, consolidate findings, and identify research gaps. Objective: This paper characterizes how software engineering research has studied developers' contributions to projects. Method: We conducted a systematic mapping study of 166 primary papers that assessed developer contributions. We characterized the contribution types, research topics, research design practices, measurement constructs, assessment approaches, contexts under study, threats to validity, and challenges. Results: The literature has focused on product-related contributions in 78% of the works, including contributions to the code (111 studies), issues (16 studies), and tasks (7 studies). Other contributions, such as communicating (23 studies) and documenting (4 studies), have also been investigated. Research has focused on topics to comprehend people (53 studies), artifacts (50 studies), and systems (28 studies) utilizing contributions. Research topics also included training developers (34 studies), characterizing assessments (22 studies), and constructing models (17 studies) and artifacts (13 studies). Studies have focused on validating their research with further opportunities for in-practice evaluation (52% of works). Activity measures were the most measured construct (72% of papers) mostly quantifying repository events or actions such as the number of commits (54 studies). Mining software repositories was the most common extraction technique in 79% of the works. Data from open-source projects were used in 66% of the studies. Other contexts under study include software engineering education (40 studies) and practitioner-industry (20 studies) projects. Threats to validity were reported in 87% of works, mainly related to internal (120 studies) and construct (117 studies) validity, including mono or unbalanced operation bias (78 studies) and inaccuracies in the data (48 studies). The most reported challenge for contribution assessment relates to the adoptability of the approaches and results (34% of the studies). Conclusions: Our findings show that contribution research is broad in software engineering but mainly focused on product-related contributions that mine measures from activities. Yet, research needs to consider more comprehensive construct measures and robust approaches to recognize the multi-faceted, nuanced, and complex nature of development work, without overlooking any developer's contribution. At the same time, contribution needs to focus on the approach applicability to help future research and technology transfer between researchers and adopters. Researchers and tool designers can leverage our results to motivate future software contribution-related work.","software contributions, contribution assessment, research design practices, systematic mapping study, empirical software engineering",https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4515827,hamer2023How,X
Students' perceptions' of integrating a contribution measurement tool in software engineering projects,"SH,CQL,MJ",2023,CSEE&T,"Measuring developers' and teams' contributions in project-based software engineering courses is challenging. Instructors require measurement tools to identify early improvement opportunities and simplify the assessment of students' contributions to projects. Besides, students could appreciate detailed, timely, and valuable feedback that encapsulates the multi-faceted nature of their contribution to improve their skills. With the rise of software repositories, data-driven tools that mine and visualize repository data have been proposed to help assess and improve software engineering courses. Still, little is known about students' perceptions of integrating these tools to measure project contributions. This paper analyzes students' perceptions of integrating a contribution measurement tool in agile software engineering projects. We collected the perceptions of 65 undergraduate students developing projects through a mixed-method approach. Our results show several benefits of using these tools in software engineering courses, providing valuable feedback, intending to use such tools in projects, and facilitating timely and helpful feedback. Additionally, students described the benefits of nine agile practices, including coding standards, reviews and inspections, and planning games. These tools were perceived as useful, easy to use, and intended to be used in future projects. Six challenges for integrating these tools in a course setting related to adoption, learning curves, configuration issues, measurement completeness, team dynamics, and Goodhart's law were found. Our results showed the acceptance and utility of such tools to aid students in software engineering projects.","measurement tool, code contributions, assessment, empirical software engineering, software engineering education",https://ieeexplore.ieee.org/document/10229405,hamer2023Students,
Software visualization using the city metaphor: Students' perceptions and experiences,"EK,SH,CQL",2023,CLEI,"Software visualization is a program comprehension technique that can support activities such as the analysis of the quality during the evolution of development. The empirical evaluation of software visualizations is necessary to provide evidence of perceptions and experiences of use, and the benefits provided during software analysis. Empirical data can help evidence the advantages and limitations of software visualizations, improving their acceptance in academia and industry. This study presents an analysis of the perceptions of 16 participants using a 3D city metaphor visualization to understand the structure of a web application and identify aspects related to development and quality best practices in a software engineering university course. For this, we studied the user experience through the UE Questionnaire (UEQ) and the ease of use, the perceived usefulness, and the intention of future use through the Technology Acceptance Model (TAM). Finally, benefits and opportunities were identified based on the perceptions of the participants and the results of the activity. The results indicate that the visualization of the city can support comprehension activities and help identify improvements in development and quality practices. Furthermore, this tool was positively perceived in the context of software engineering courses. Most of the acceptance and experience constructs were evaluated positively, with some opportunities identified regarding ease of use and visualization comprehension. In general, the visualization helped identify possible opportunities required for software applications under review.","software visualization, program comprehension, software evolution, software quality, TAM, UEQ, education and training, software engineering, empirical study.",,kulhmann2023Software,